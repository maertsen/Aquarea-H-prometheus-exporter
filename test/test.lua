package.path = package.path..';/home/user/.luarocks/share/lua/5.1/?.lua'
package.cpath = package.path..';/home/user/.luarocks/lib/lua/5.1/?.so'
require 'struct'

PANASONIC_ANSWER =string.char(0x71, 0xC8, 0x01, 0x10, 0x56, 0x55, 0xE2, 0x49, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x16, 0x23, 0x55, 0x16, 0x96, 0x55, 0x05, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0x96, 0x80, 0x80, 0xB2, 0x71, 0x71, 0x97, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x85, 0xB5, 0x8A, 0x85, 0x85, 0xD0, 0x7B, 0x78, 0x1F, 0x7E, 0x1F, 0x1F, 0x79, 0x79, 0x8D, 0x8D, 0xA8, 0x99, 0x7B, 0x8F, 0xB2, 0xA3, 0x7B, 0x8F, 0x95, 0x85, 0x80, 0x94, 0x8A, 0x94, 0x9E, 0x94, 0x8A, 0x94, 0x9E, 0x85, 0x8F, 0x8A, 0x02, 0x3D, 0x7B, 0xBC, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x31, 0x26, 0x15, 0x69, 0x07, 0x12, 0x11, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE2, 0xCF, 0x0C, 0x54, 0x14, 0x12, 0xD0, 0x0B, 0x14, 0x08, 0x95, 0x93, 0xB3, 0x88, 0x93, 0x93, 0x93, 0x93, 0x94, 0xA9, 0x32, 0x32, 0x32, 0x95, 0x94, 0x93, 0x8B, 0x95, 0x95, 0x86, 0x61, 0x88, 0x61, 0x8A, 0x2E, 0x01, 0x01, 0x01, 0x00, 0x00, 0x15, 0x09, 0x2D, 0x63, 0x01, 0x01, 0x79, 0x79, 0x01, 0x01, 0xDB, 0x0B, 0x00, 0x4E, 0x0A, 0x00, 0x4F, 0x00, 0x00, 0x66, 0x00, 0x00, 0x08, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x12)
PANASONIC_ANSWER2=string.char(0x71, 0xC8, 0x01, 0x10, 0x56, 0x55, 0xE2, 0x49, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x16, 0x23, 0x55, 0x16, 0x96, 0x55, 0x05, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0x96, 0x80, 0x80, 0xB2, 0x71, 0x71, 0x97, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x85, 0xB5, 0x8A, 0x85, 0x85, 0xD0, 0x7B, 0x78, 0x1F, 0x7E, 0x1F, 0x1F, 0x79, 0x79, 0x8D, 0x8D, 0xA8, 0x99, 0x7B, 0x8F, 0xB2, 0xA3, 0x7B, 0x8F, 0x95, 0x85, 0x80, 0x94, 0x8A, 0x94, 0x9E, 0x94, 0x8A, 0x94, 0x9E, 0x85, 0x8F, 0x8A, 0x02, 0x3D, 0x7B, 0xBC, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x31, 0x26, 0x15, 0x69, 0x07, 0x09, 0x11, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE2, 0xCF, 0x0C, 0x54, 0x14, 0x12, 0xD0, 0x0B, 0x14, 0x08, 0x95, 0x93, 0xB0, 0x85, 0x93, 0x93, 0x93, 0x93, 0x94, 0xAB, 0x32, 0x32, 0x32, 0x95, 0x94, 0x93, 0x86, 0x95, 0x94, 0x84, 0x61, 0x84, 0x61, 0x86, 0x2A, 0x01, 0x01, 0x01, 0x00, 0x00, 0x15, 0x09, 0x2D, 0x63, 0x01, 0x01, 0x79, 0x79, 0x01, 0x01, 0xDB, 0x0B, 0x00, 0x4E, 0x0A, 0x00, 0x4F, 0x00, 0x00, 0x66, 0x00, 0x00, 0x08, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x33)
PANASONIC_ANSWER3=string.char(0x71, 0xC8, 0x01, 0x10, 0x56, 0x55, 0xE2, 0x49, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x16, 0x23, 0x55, 0x16, 0x96, 0x55, 0x05, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0x96, 0x80, 0x80, 0xB2, 0x71, 0x71, 0x97, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x85, 0xB5, 0x8A, 0x85, 0x85, 0xD0, 0x7B, 0x78, 0x1F, 0x7E, 0x1F, 0x1F, 0x79, 0x79, 0x8D, 0x8D, 0xA8, 0x99, 0x7B, 0x8F, 0xB2, 0xA3, 0x7B, 0x8F, 0x95, 0x85, 0x80, 0x94, 0x8A, 0x94, 0x9E, 0x94, 0x8A, 0x94, 0x9E, 0x85, 0x8F, 0x8A, 0x02, 0x3D, 0x7B, 0xBC, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x31, 0x26, 0x15, 0x69, 0x07, 0x24, 0x11, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE2, 0xCF, 0x0C, 0x54, 0x14, 0x12, 0xD0, 0x0B, 0x14, 0x08, 0x95, 0x95, 0xB9, 0x89, 0x94, 0x94, 0x95, 0x95, 0x94, 0xA8, 0x32, 0x32, 0x32, 0x95, 0x94, 0x94, 0x89, 0x95, 0x95, 0x88, 0x61, 0x89, 0x61, 0x8A, 0x31, 0x01, 0x01, 0x01, 0x00, 0x00, 0x71, 0x09, 0x2E, 0x64, 0x01, 0x01, 0x79, 0x79, 0x01, 0x01, 0xDA, 0x0C, 0x00, 0xDF, 0x0A, 0x00, 0x5D, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x08, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0xEA)
PANASONIC_ANSWER4=string.char(0x71, 0xC8, 0x01, 0x10, 0x56, 0x55, 0xE2, 0x49, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x16, 0x23, 0x55, 0x16, 0x96, 0x55, 0x05, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0x96, 0x80, 0x80, 0xB2, 0x71, 0x71, 0x97, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x85, 0xB5, 0x8A, 0x85, 0x85, 0xD0, 0x7B, 0x78, 0x1F, 0x7E, 0x1F, 0x1F, 0x79, 0x79, 0x8D, 0x8D, 0xA8, 0x99, 0x7B, 0x8F, 0xB2, 0xA3, 0x7B, 0x8F, 0x95, 0x85, 0x80, 0x94, 0x8A, 0x94, 0x9E, 0x94, 0x8A, 0x94, 0x9E, 0x85, 0x8F, 0x8A, 0x02, 0x3D, 0x7B, 0xBC, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x31, 0x26, 0x15, 0x69, 0x07, 0x24, 0x13, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE2, 0xCF, 0x0C, 0x54, 0x14, 0x12, 0xD0, 0x0B, 0x14, 0x08, 0x95, 0x95, 0xB7, 0x89, 0x94, 0x94, 0x95, 0x95, 0x94, 0xA8, 0x32, 0x32, 0x32, 0x95, 0x94, 0x94, 0x90, 0x95, 0x95, 0x89, 0x61, 0x8A, 0x61, 0x8B, 0x31, 0x01, 0x01, 0x01, 0x00, 0x00, 0xCD, 0x09, 0x30, 0x66, 0x01, 0x01, 0x79, 0x79, 0x01, 0x01, 0xDB, 0x0C, 0x00, 0xDF, 0x0A, 0x00, 0x5D, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x08, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x7F)
PANASONIC_ANSWER5=string.char(0x71, 0xC8, 0x01, 0x10, 0x56, 0x55, 0xE2, 0x49, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x16, 0x23, 0x55, 0x16, 0x96, 0x55, 0x05, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0x96, 0x80, 0x80, 0xB2, 0x71, 0x71, 0x97, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x85, 0xB5, 0x8A, 0x85, 0x85, 0xD0, 0x7B, 0x78, 0x1F, 0x7E, 0x1F, 0x1F, 0x79, 0x79, 0x8D, 0x8D, 0xA8, 0x99, 0x7B, 0x8F, 0xB2, 0xA3, 0x7B, 0x8F, 0x95, 0x85, 0x80, 0x94, 0x8A, 0x94, 0x9E, 0x94, 0x8A, 0x94, 0x9E, 0x85, 0x8F, 0x8A, 0x02, 0x3D, 0x7B, 0xBC, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x31, 0x26, 0x15, 0x69, 0x07, 0x12, 0x13, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE2, 0xCF, 0x0C, 0x54, 0x14, 0x12, 0xD0, 0x0B, 0x14, 0x08, 0x95, 0x94, 0xB2, 0x88, 0x94, 0x94, 0x94, 0x94, 0x94, 0xA9, 0x32, 0x32, 0x32, 0x95, 0x94, 0x94, 0x9C, 0x95, 0x96, 0x88, 0x61, 0x8A, 0x61, 0x8A, 0x30, 0x01, 0x01, 0x01, 0x00, 0x00, 0x71, 0x09, 0x2F, 0x64, 0x01, 0x01, 0x79, 0x79, 0x01, 0x01, 0xDC, 0x0C, 0x00, 0xE0, 0x0A, 0x00, 0x5D, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x08, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0xEC)

require 'decode'
require 'test/util'

response = parse_uart_response(PANASONIC_ANSWER4)

print(dump(response))

function makepromlines(prefix, name, source)
    local buffer = {"# TYPE ", prefix, name, " gauge\n", prefix, name, " ", source, "\n"}
    return table.concat(buffer)
end

function metrics(readout)
    local metrics = {}
    for k, v in pairs(readout) do
        table.insert(metrics, makepromlines("aquarea_", k, v))
    end
    return table.concat(metrics)
end

print (metrics(response))